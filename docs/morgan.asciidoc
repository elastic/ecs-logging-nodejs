[[morgan]]
== ECS Logging with Morgan

This Node.js package provides a formatter for the https://github.com/expressjs/morgan#readme[morgan]
logging middleware -- commonly used with Express -- compatible with
{ecs-logging-ref}/intro.html[Elastic Common Schema (ECS) logging].
In combination with the https://www.elastic.co/beats/filebeat[Filebeat] shipper,
you can https://www.elastic.co/log-monitoring[monitor all your logs] in one
place in the Elastic Stack.


[float]
=== Setup

[float]
[[morgan-setup-step-1]]
==== Step 1: Install

[source,cmd]
----
$ npm install @elastic/ecs-morgan-format
----


[float]
[[morgan-setup-step-2]]
==== Step 2: Configure

[source,js]
----
const app = require('express')()
const morgan = require('morgan')
const ecsFormat = require('@elastic/ecs-morgan-format')

app.use(morgan(ecsFormat(/* options */))) <1>

// ...
app.get('/', function (req, res) {
  res.send('hello, world!')
})
app.listen(3000)
----
<1> Pass the ECS formatter to `morgan()`.


[float]
[[morgan-setup-step-3]]
==== Step 3: Configure Filebeat

The best way to collect the logs once they are ECS-formatted is with {filebeat-ref}[Filebeat]:

include::{ecs-repo-dir}/setup.asciidoc[tag=configure-filebeat]


[float]
[[morgan-usage]]
=== Usage

[source,js]
----
const app = require('express')()
const morgan = require('morgan')
const ecsFormat = require('@elastic/ecs-morgan-format')

app.use(morgan(ecsFormat(/* options */))) <1>

app.get('/', function (req, res) {
  res.send('hello, world!')
})
app.get('/error', function (req, res, next) {
  next(new Error('boom'))
})

app.listen(3000)
----
<1> See available options <<morgan-ref,below>>.

Running this script (the full example is https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-morgan-format/examples/express.js[here])
and making a request (via `curl -i localhost:3000/`) will produce log output
similar to the following:

[source,cmd]
----
% node examples/express.js | jq .  # piping to jq for pretty-printing
{
  "@timestamp": "2021-01-16T00:03:23.279Z",
  "log.level": "info",
  "message": "::1 - - [16/Jan/2021:00:03:23 +0000] \"GET / HTTP/1.1\" 200 13 \"-\" \"curl/7.64.1\"",
  "ecs.version": "8.10.0",
  "http": {
    "version": "1.1",
    "request": {
      "method": "GET",
      "headers": {
        "host": "localhost:3000",
        "accept": "*/*"
      }
    },
    "response": {
      "status_code": 200,
      "headers": {
        "x-powered-by": "Express",
        "content-type": "text/html; charset=utf-8",
        "etag": "W/\"d-HwnTDHB9U/PRbFMN1z1wps51lqk\""
      },
      "body": {
        "bytes": 13
      }
    }
  },
  "url": {
    "path": "/",
    "domain": "localhost",
    "full": "http://localhost:3000/"
  },
  "user_agent": {
    "original": "curl/7.64.1"
  }
}
----

[float]
[[morgan-format-options]]
=== Format Options

You can pass any https://github.com/expressjs/morgan#morganformat-options[`format` argument]
you would normally pass to `morgan()`, and the log "message" field will use the
specified format. The default is https://github.com/expressjs/morgan#combined[`combined`].

[source,js]
----
const app = require('express')()
const morgan = require('morgan')
const ecsFormat = require('@elastic/ecs-morgan-format')

app.use(morgan(ecsFormat({ format: 'tiny' }))) <1>
// ...
----
<1> If "format" is the only option you are using, you may pass it as `ecsFormat('tiny')`.

[float]
[[morgan-log-level]]
=== log.level

The `log.level` field will be "error" for response codes >= 500, otherwise
"info". For example, running  https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-morgan-format/examples/express.js[examples/express.js]
again, a `curl -i localhost:3000/error` will yield:

[source,cmd]
----
% node examples/express.js | jq .
{
  "@timestamp": "2021-01-18T17:52:12.810Z",
  "log.level": "error",
  "message": "::1 - - [18/Jan/2021:17:52:12 +0000] \"GET /error HTTP/1.1\" 500 1416 \"-\" \"curl/7.64.1\"",
  "http": {
    "response": {
      "status_code": 500,
  ...
----


[float]
[[morgan-apm]]
=== Log Correlation with APM

This ECS log formatter integrates with https://www.elastic.co/apm[Elastic APM].
If your Node app is using the {apm-node-ref}/intro.html[Node.js Elastic APM Agent],
then a number of fields are added to log records to correlate between APM
services or traces and logging data:

- Log statements (e.g. `logger.info(...)`) called when there is a current
  tracing span will include {ecs-ref}/ecs-tracing.html[tracing fields] --
  `trace.id`, `transaction.id`.
- A number of service identifier fields determined by or configured on the APM
  agent allow cross-linking between services and logs in Kibana --
  `service.name`, `service.version`, `service.environment`, `service.node.name`.
- `event.dataset` enables {observability-guide}/inspect-log-anomalies.html[log
  rate anomaly detection] in the Elastic Observability app.

For example, running https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-morgan-format/examples/express-with-apm.js[examples/express-with-apm.js] and `curl -i localhost:3000/` results in a log record with the following:

[source,cmd]
----
% node examples/express-with-apm.js | jq .
{
  // The same fields as before, plus:
  "service.name": "express-with-elastic-apm",
  "service.version": "1.1.0",
  "service.environment": "development",
  "event.dataset": "express-with-elastic-apm",
  "trace.id": "116d46f667a7600deed9c41fa015f7de",
  "transaction.id": "b84fb72d7bf42866"
}
----

These IDs match trace data reported by the APM agent.

Integration with Elastic APM can be explicitly disabled via the
`apmIntegration: false` option, for example:

[source,js]
----
app.use(morgan(ecsFormat({ apmIntegration: false })))
----


[float]
[[morgan-ref]]
=== Reference

[float]
[[morgan-ref-ecsFormat]]
==== `ecsFormat([options])`

* `options` +{type-object}+ The following options are supported:
** `format` +{type-string}+ A format *name* (e.g. 'combined'), format function (e.g. `morgan.combined`), or a format string (e.g. ':method :url :status'). This is used to format the "message" field. Defaults to `morgan.combined`.
** `convertErr` +{type-boolean}+ Whether to convert a logged `err` field to ECS error fields. *Default:* `true`.
** `apmIntegration` +{type-boolean}+ Whether to enable APM agent integration. *Default:* `true`.
** `serviceName` +{type-string}+ A "service.name" value. If specified this overrides any value from an active APM agent.
** `serviceVersion` +{type-string}+ A "service.version" value. If specified this overrides any value from an active APM agent.
** `serviceEnvironment` +{type-string}+ A "service.environment" value. If specified this overrides any value from an active APM agent.
** `serviceNodeName` +{type-string}+ A "service.node.name" value. If specified this overrides any value from an active APM agent.
** `eventDataset` +{type-string}+ A "event.dataset" value. If specified this overrides the default of using `${serviceVersion}`.

Create a formatter for morgan that emits in ECS Logging format.
