[[winston]]
== ECS Logging with Winston

This Node.js package provides a formatter for the https://github.com/winstonjs/winston#readme[winston]
logger, compatible with {ecs-logging-ref}/intro.html[Elastic Common Schema (ECS) logging].
In combination with the https://www.elastic.co/beats/filebeat[Filebeat] shipper,
you can https://www.elastic.co/log-monitoring[monitor all your logs] in one
place in the Elastic Stack.


[float]
=== Setup

[float]
[[winston-setup-step-1]]
==== Step 1: Install

[source,cmd]
----
$ npm install @elastic/ecs-winston-format
----

[float]
[[winston-setup-step-2]]
==== Step 2: Configure

[source,js]
----
const winston = require('winston')
const ecsFormat = require('@elastic/ecs-winston-format')

const logger = winston.createLogger({
  format: ecsFormat(), <1>
  transports: [
    new winston.transports.Console()
  ]
})

logger.info('hi')
logger.error('oops there is a problem', { err: new Error('boom') })
----
<1> Pass the ECS formatter to winston here.


[float]
[[winston-setup-step-3]]
==== Step 3: Configure Filebeat

The best way to collect the logs once they are ECS-formatted is with {filebeat-ref}[Filebeat]:

include::{ecs-repo-dir}/setup.asciidoc[tag=configure-filebeat]

NOTE: You might like to try out our tutorial using Node.js ECS logging with winston: {cloud}/ec-getting-started-search-use-cases-node-logs.html[Ingest logs from a Node.js web application using Filebeat].

[float]
[[winston-usage]]
=== Usage

[source,js]
----
const winston = require('winston')
const ecsFormat = require('@elastic/ecs-winston-format')

const logger = winston.createLogger({
  level: 'info',
  format: ecsFormat(), <1>
  transports: [
    new winston.transports.Console()
  ]
})

logger.info('hi')
logger.error('oops there is a problem', { foo: 'bar' })
----

Running this script (available https://github.com/elastic/ecs-logging-nodejs/blob/main/loggers/winston/examples/basic.js[here]) will produce log output similar to the following:

[source,cmd]
----
% node examples/basic.js
{"@timestamp":"2021-01-13T21:32:38.095Z","log.level":"info","message":"hi","ecs":{"version":"1.6.0"}}
{"@timestamp":"2021-01-13T21:32:38.096Z","log.level":"error","message":"oops there is a problem","ecs":{"version":"1.6.0"},"foo":"bar"}
----

The formatter handles serialization to JSON, so you don't need to add the
https://github.com/winstonjs/logform#json[json] formatter. As well, a
timestamp is automatically generated by the formatter, so you don't need to add
the https://github.com/winstonjs/logform#timestamp[timestamp] formatter.


[float]
[[winston-error-logging]]
=== Error logging

By default, the formatter will convert an `err` meta field that is an Error instance
to {ecs-ref}/ecs-error.html[ECS Error fields].
For https://github.com/elastic/ecs-logging-nodejs/blob/main/loggers/winston/examples/error.js[example]:

[source,js]
----
const winston = require('winston')
const ecsFormat = require('@elastic/ecs-winston-format')
const logger = winston.createLogger({
  format: ecsFormat(), <1>
  transports: [
    new winston.transports.Console()
  ]
})

const myErr = new Error('boom')
logger.info('oops', { err: myErr }) <2>
----

will yield (pretty-printed for readability):

[source,cmd]
----
% node examples/error.js | jq .
{
  "@timestamp": "2021-01-26T17:25:07.983Z",
  "log.level": "info",
  "message": "oops",
  "ecs": {
    "version": "1.6.0"
  },
  "error": {
    "type": "Error",
    "message": "boom",
    "stack_trace": "Error: boom\n    at Object.<anonymous> (..."
  }
}
----

Special handling of the `err` meta field can be disabled via the `convertErr:
false` option:

[source,js]
----
...
const logger = winston.createLogger({
  format: ecsFormat({ convertErr: false }),
...
----


[float]
[[winston-http-logging]]
=== HTTP Request and Response Logging

With the `convertReqRes: true` option, the formatter will automatically
convert Node.js core https://nodejs.org/api/http.html#http_class_http_incomingmessage[request]
and https://nodejs.org/api/http.html#http_class_http_serverresponse[response]
objects when passed as the `req` and `res` meta fields, respectively.

[source,js]
----
const http = require('http')
const winston = require('winston')
const ecsFormat = require('@elastic/ecs-winston-format')

const logger = winston.createLogger({
  level: 'info',
  format: ecsFormat({ convertReqRes: true }), <1>
  transports: [
    new winston.transports.Console()
  ]
})

const server = http.createServer(handler)
server.listen(3000, () => {
  logger.info('listening at http://localhost:3000')
})

function handler (req, res) {
  res.setHeader('Foo', 'Bar')
  res.end('ok')
  logger.info('handled request', { req, res }) <2>
}
----
<1> use `convertReqRes` option
<2> log `req` and/or `res` meta fields

This will produce logs with request and response info using
{ecs-ref}/ecs-http.html[ECS HTTP fields].
For https://github.com/elastic/ecs-logging-nodejs/blob/main/loggers/winston/examples/http.js[example]:

[source,cmd]
----
% node examples/http.js | jq .    # using jq for pretty printing
...                               # run 'curl http://localhost:3000/'
{
  "@timestamp": "2021-01-13T22:00:07.442Z",
  "log.level": "info",
  "message": "handled request",
  "ecs": {
    "version": "1.6.0"
  },
  "http": {
    "version": "1.1",
    "request": {
      "method": "GET",
      "headers": {
        "host": "localhost:3000",
        "accept": "*/*"
      }
    },
    "response": {
      "status_code": 200,
      "headers": {
        "foo": "Bar"
      }
    }
  },
  "url": {
    "path": "/",
    "full": "http://localhost:3000/"
  },
  "user_agent": {
    "original": "curl/7.64.1"
  }
}
----


[float]
[[winston-apm]]
=== Integration with APM Tracing

This ECS log formatter integrates with https://www.elastic.co/apm[Elastic APM].
If your Node app is using the {apm-node-ref}/intro.html[Node.js Elastic APM Agent],
then fields are added to log records that {ecs-ref}/ecs-tracing.html[identify an active trace] and the configured service name
({ecs-ref}/ecs-service.html["service.name"] and {ecs-ref}/ecs-event.html["event.dataset"]).
These fields allow cross linking between traces and logs in Kibana and support
log anomaly detection.

For example, running https://github.com/elastic/ecs-logging-nodejs/blob/main/loggers/winston/examples/http-with-elastic-apm.js[examples/http-with-elastic-apm.js] and `curl -i localhost:3000/` results in a log record with the following:

[source,cmd]
----
% node examples/http-with-elastic-apm.js | jq .
...
  "event": {
    "dataset": "http-with-elastic-apm.log"
  },
  "trace": {
    "id": "74631535a02bbe6a07c298b28c7443f4"
  },
  "transaction": {
    "id": "505400b77aba4d9a"
  },
  "service": {
    "name": "http-with-elastic-apm"
  }
...
----

These IDs match trace data reported by the APM agent.

Integration with Elastic APM can be explicitly disabled via the
`apmIntegration: false` option, for example:

[source,js]
----
const logger = winston.createLogger({
  format: ecsFormat({ apmIntegration: false }),
  // ...
})
----

