[[winston]]
== ECS Logging with Winston

This Node.js package provides a formatter for the https://github.com/winstonjs/winston#readme[winston]
logger, compatible with {ecs-logging-ref}/intro.html[Elastic Common Schema (ECS) logging].
In combination with the https://www.elastic.co/beats/filebeat[Filebeat] shipper,
you can https://www.elastic.co/log-monitoring[monitor all your logs] in one
place in the Elastic Stack. `winston` 3.x versions are supported.


[float]
=== Setup

[float]
[[winston-setup-step-1]]
==== Step 1: Install

[source,cmd]
----
$ npm install @elastic/ecs-winston-format
----

[float]
[[winston-setup-step-2]]
==== Step 2: Configure

[source,js]
----
const winston = require('winston');
const { ecsFormat } = require('@elastic/ecs-winston-format');

const logger = winston.createLogger({
  format: ecsFormat(/* options */), <1>
  transports: [
    new winston.transports.Console()
  ]
});

logger.info('hi');
logger.error('oops there is a problem', { err: new Error('boom') });
----
<1> Pass the ECS formatter to winston here.


[float]
[[winston-setup-step-3]]
==== Step 3: Configure Filebeat

The best way to collect the logs once they are ECS-formatted is with {filebeat-ref}[Filebeat]:

include::{ecs-repo-dir}/setup.asciidoc[tag=configure-filebeat]

NOTE: You might like to try out our tutorial using Node.js ECS logging with winston: {cloud}/ec-getting-started-search-use-cases-node-logs.html[Ingest logs from a Node.js web application using Filebeat].

[float]
[[winston-usage]]
=== Usage

[source,js]
----
const winston = require('winston');
const { ecsFormat } = require('@elastic/ecs-winston-format');

const logger = winston.createLogger({
  level: 'info',
  format: ecsFormat(/* options */), <1>
  transports: [
    new winston.transports.Console()
  ]
});

logger.info('hi');
logger.error('oops there is a problem', { foo: 'bar' });
----
<1> See available options <<winston-ref,below>>.

Running this script (available https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-winston-format/examples/basic.js[here]) will produce log output similar to the following:

[source,cmd]
----
% node examples/basic.js
{"@timestamp":"2023-10-14T02:14:17.302Z","log.level":"info","message":"hi","ecs.version":"1.6.0"}
{"@timestamp":"2023-10-14T02:14:17.304Z","log.level":"error","message":"oops there is a problem","ecs.version":"1.6.0","foo":"bar"}
----

The formatter handles serialization to JSON, so you don't need to add the
https://github.com/winstonjs/logform#json[json] formatter. As well, a
timestamp is automatically generated by the formatter, so you don't need to add
the https://github.com/winstonjs/logform#timestamp[timestamp] formatter.


[float]
[[winston-error-logging]]
=== Error logging

By default, the formatter will convert an `err` meta field that is an Error instance
to {ecs-ref}/ecs-error.html[ECS Error fields].
For https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-winston-format/examples/error.js[example]:

[source,js]
----
const winston = require('winston');
const { ecsFormat } = require('@elastic/ecs-winston-format');
const logger = winston.createLogger({
  format: ecsFormat(), <1>
  transports: [
    new winston.transports.Console()
  ]
});

const myErr = new Error('boom');
logger.info('oops', { err: myErr }); <2>
----

will yield (pretty-printed for readability):

[source,cmd]
----
% node examples/error.js | jq .
{
  "@timestamp": "2021-01-26T17:25:07.983Z",
  "log.level": "info",
  "message": "oops",
  "error": {
    "type": "Error",
    "message": "boom",
    "stack_trace": "Error: boom\n    at Object.<anonymous> (..."
  },
  "ecs.version": "1.6.0"
}
----

Special handling of the `err` meta field can be disabled via the `convertErr:
false` option:

[source,js]
----
...
const logger = winston.createLogger({
  format: ecsFormat({ convertErr: false }),
...
----


[float]
[[winston-http-logging]]
=== HTTP Request and Response Logging

With the `convertReqRes: true` option, the formatter will automatically
convert Node.js core https://nodejs.org/api/http.html#http_class_http_incomingmessage[request]
and https://nodejs.org/api/http.html#http_class_http_serverresponse[response]
objects when passed as the `req` and `res` meta fields, respectively.

[source,js]
----
const http = require('http');
const winston = require('winston');
const { ecsFormat } = require('@elastic/ecs-winston-format');

const logger = winston.createLogger({
  level: 'info',
  format: ecsFormat({ convertReqRes: true }), <1>
  transports: [
    new winston.transports.Console()
  ]
});

const server = http.createServer(handler);
server.listen(3000, () => {
  logger.info('listening at http://localhost:3000')
});

function handler (req, res) {
  res.setHeader('Foo', 'Bar');
  res.end('ok');
  logger.info('handled request', { req, res }); <2>
}
----
<1> use `convertReqRes` option
<2> log `req` and/or `res` meta fields

This will produce logs with request and response info using
{ecs-ref}/ecs-http.html[ECS HTTP fields].
For https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-winston-format/examples/http.js[example]:

[source,cmd]
----
% node examples/http.js | jq .    # using jq for pretty printing
...                               # run 'curl http://localhost:3000/'
{
  "@timestamp": "2023-10-14T02:15:54.768Z",
  "log.level": "info",
  "message": "handled request",
  "http": {
    "version": "1.1",
    "request": {
      "method": "GET",
      "headers": {
        "host": "localhost:3000",
        "user-agent": "curl/8.1.2",
        "accept": "*/*"
      }
    },
    "response": {
      "status_code": 200,
      "headers": {
        "foo": "Bar"
      }
    }
  },
  "url": {
    "path": "/",
    "full": "http://localhost:3000/"
  },
  "client": {
    "address": "::ffff:127.0.0.1",
    "ip": "::ffff:127.0.0.1",
    "port": 49538
  },
  "user_agent": {
    "original": "curl/8.1.2"
  },
  "ecs.version": "1.6.0"
}
----


[float]
[[winston-apm]]
=== Log Correlation with APM

This ECS log formatter integrates with https://www.elastic.co/apm[Elastic APM].
If your Node app is using the {apm-node-ref}/intro.html[Node.js Elastic APM Agent],
then a number of fields are added to log records to correlate between APM
services or traces and logging data:

- Log statements (e.g. `logger.info(...)`) called when there is a current
  tracing span will include {ecs-ref}/ecs-tracing.html[tracing fields] --
  `trace.id`, `transaction.id`, `span.id`.
- A number of service identifier fields determined by or configured on the APM
  agent allow cross-linking between services and logs in Kibana --
  `service.name`, `service.version`, `service.environment`, `service.node.name`.
- `event.dataset` enables {observability-guide}/inspect-log-anomalies.html[log
  rate anomaly detection] in the Elastic Observability app.

For example, running https://github.com/elastic/ecs-logging-nodejs/blob/main/packages/ecs-winston-format/examples/http-with-elastic-apm.js[examples/http-with-elastic-apm.js] and `curl -i localhost:3000/` results in a log record with the following:

[source,cmd]
----
% node examples/http-with-elastic-apm.js | jq .
...
  "service.name": "http-with-elastic-apm",
  "service.version": "1.4.0",
  "service.environment": "development",
  "event.dataset": "http-with-elastic-apm"
  "trace.id": "7fd75f0f33ff49aba85d060b46dcad7e",
  "transaction.id": "6c97c7c1b468fa05"
}
----

These IDs match trace data reported by the APM agent.

Integration with Elastic APM can be explicitly disabled via the
`apmIntegration: false` option, for example:

[source,js]
----
const logger = winston.createLogger({
  format: ecsFormat({ apmIntegration: false }),
  // ...
})
----

[float]
[[winston-limitations]]
=== Limitations and Considerations

The https://github.com/elastic/ecs-logging/tree/main/spec[ecs-logging spec]
suggests that the first three fields in log records should be `@timestamp`,
`log.level`, and `message`. As of version 1.5.0, this formatter does *not*
follow this suggestion. It would be possible but would require creating a new
Object in `ecsFields` for each log record. Given that ordering of ecs-logging
fields is for *human readability* and does not affect interoperability, the
decision was made to prefer performance.

[float]
[[winston-ref]]
=== Reference

[float]
[[winston-ref-ecsFormat]]
==== `ecsFormat([options])`

* `options` +{type-object}+ The following options are supported:
** `convertErr` +{type-boolean}+ Whether to convert a logged `err` field to ECS error fields. *Default:* `true`.
** `convertReqRes` +{type-boolean}+ Whether to logged `req` and `res` HTTP request and response fields to ECS HTTP, User agent, and URL fields. *Default:* `false`.
** `apmIntegration` +{type-boolean}+ Whether to enable APM agent integration. *Default:* `true`.
** `serviceName` +{type-string}+ A "service.name" value. If specified this overrides any value from an active APM agent.
** `serviceVersion` +{type-string}+ A "service.version" value. If specified this overrides any value from an active APM agent.
** `serviceEnvironment` +{type-string}+ A "service.environment" value. If specified this overrides any value from an active APM agent.
** `serviceNodeName` +{type-string}+ A "service.node.name" value. If specified this overrides any value from an active APM agent.
** `eventDataset` +{type-string}+ A "event.dataset" value. If specified this overrides the default of using `${serviceVersion}`.

Create a formatter for winston that emits in ECS Logging format. This is a
single format that handles both <<winston-ref-ecsFields>> and <<winston-ref-ecsStringify>>.
The following two are equivalent:

[source,js]
----
const { ecsFormat, ecsFields, ecsStringify } = require('@elastic/ecs-winston-format');
const winston = require('winston');

const logger = winston.createLogger({
  format: ecsFormat(/* options */),
  // ...
});

const logger = winston.createLogger({
  format: winston.format.combine(
    ecsFields(/* options */),
    ecsStringify()
  ),
  // ...
});
----

[float]
[[winston-ref-ecsFields]]
==== `ecsFields([options])`

* `options` +{type-object}+ The following options are supported:
** `convertErr` +{type-boolean}+ Whether to convert a logged `err` field to ECS error fields. *Default:* `true`.
** `convertReqRes` +{type-boolean}+ Whether to logged `req` and `res` HTTP request and response fields to ECS HTTP, User agent, and URL fields. *Default:* `false`.
** `apmIntegration` +{type-boolean}+ Whether to enable APM agent integration. *Default:* `true`.
** `serviceName` +{type-string}+ A "service.name" value. If specified this overrides any value from an active APM agent.
** `serviceVersion` +{type-string}+ A "service.version" value. If specified this overrides any value from an active APM agent.
** `serviceEnvironment` +{type-string}+ A "service.environment" value. If specified this overrides any value from an active APM agent.
** `serviceNodeName` +{type-string}+ A "service.node.name" value. If specified this overrides any value from an active APM agent.
** `eventDataset` +{type-string}+ A "event.dataset" value. If specified this overrides the default of using `${serviceVersion}`.

Create a formatter for winston that converts fields on the log record info
objecct to ECS Logging format.

[float]
[[winston-ref-ecsStringify]]
==== `ecsStringify([options])`

Create a formatter for winston that stringifies/serializes the log record to
JSON. (This is very similar to `logform.json()`.)
