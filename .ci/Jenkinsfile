#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-logging-nodejs'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Parallel'){
      options { skipDefaultCheckout() }
      parallel {
        stage('Test - Node.js v10') {
          steps {
            buildWithGitHubNotification('10')
          }
        }
        stage('Test - Node.js v12') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            buildWithGitHubNotification('12')
          }
        }
        stage('Test - Node.js v14') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            buildWithGitHubNotification('14')
          }
        }
        stage('Test - Node.js v16') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            buildWithGitHubNotification('16')
          }
        }
        stage('Test - Node.js v17') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            buildWithGitHubNotification('17')
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def runTest(version){
  deleteDir()
  unstash 'source'
  dir("${BASE_DIR}"){
        docker.image("node:${version}").inside("-e HOME=${WORKSPACE}/${BASE_DIR}") {
      sh(label: 'Install dependencies', script: '.ci/run-install.sh')
      sh(label: 'Run tests', script: '.ci/run-test.sh')
    }
  }
}

def buildWithGitHubNotification(version){
  withGithubNotify(context: "Test - Node.js v${version}") {
    runTest(version)
  }
}
